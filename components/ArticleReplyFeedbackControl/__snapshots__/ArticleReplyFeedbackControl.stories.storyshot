// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Storyshots ArticleReplyFeedbackControl With Article Reply And Reply Set 1`] = `
<MockedProvider
  addTypename={true}
  mocks={Array []}
>
  <ApolloProvider
    client={
      ApolloClient {
        "cache": InMemoryCache {
          "addTypename": true,
          "config": Object {
            "addTypename": true,
            "dataIdFromObject": [Function],
            "resultCaching": true,
            "typePolicies": Object {},
          },
          "data": Root {
            "canRead": [Function],
            "data": Object {},
            "getFieldValue": [Function],
            "group": CacheGroup {
              "caching": true,
              "d": [Function],
              "keyMaker": KeyTrie {
                "makeData": [Function],
                "weakness": true,
              },
            },
            "policies": Policies {
              "cache": [Circular],
              "config": Object {
                "cache": [Circular],
                "dataIdFromObject": [Function],
                "possibleTypes": undefined,
                "typePolicies": Object {},
              },
              "rootIdsByTypename": Object {
                "Mutation": "ROOT_MUTATION",
                "Query": "ROOT_QUERY",
                "Subscription": "ROOT_SUBSCRIPTION",
              },
              "rootTypenamesById": Object {
                "ROOT_MUTATION": "Mutation",
                "ROOT_QUERY": "Query",
                "ROOT_SUBSCRIPTION": "Subscription",
              },
              "storageTrie": KeyTrie {
                "makeData": [Function],
                "weakness": true,
              },
              "typePolicies": Object {},
              "usingPossibleTypes": false,
            },
            "refs": Object {},
            "rootIds": Object {},
            "sharedLayerGroup": CacheGroup {
              "caching": true,
              "d": [Function],
              "keyMaker": KeyTrie {
                "makeData": [Function],
                "weakness": true,
              },
            },
            "toReference": [Function],
          },
          "getFragmentDoc": [Function],
          "makeVar": [Function],
          "maybeBroadcastWatch": [Function],
          "optimisticData": Root {
            "canRead": [Function],
            "data": Object {},
            "getFieldValue": [Function],
            "group": CacheGroup {
              "caching": true,
              "d": [Function],
              "keyMaker": KeyTrie {
                "makeData": [Function],
                "weakness": true,
              },
            },
            "policies": Policies {
              "cache": [Circular],
              "config": Object {
                "cache": [Circular],
                "dataIdFromObject": [Function],
                "possibleTypes": undefined,
                "typePolicies": Object {},
              },
              "rootIdsByTypename": Object {
                "Mutation": "ROOT_MUTATION",
                "Query": "ROOT_QUERY",
                "Subscription": "ROOT_SUBSCRIPTION",
              },
              "rootTypenamesById": Object {
                "ROOT_MUTATION": "Mutation",
                "ROOT_QUERY": "Query",
                "ROOT_SUBSCRIPTION": "Subscription",
              },
              "storageTrie": KeyTrie {
                "makeData": [Function],
                "weakness": true,
              },
              "typePolicies": Object {},
              "usingPossibleTypes": false,
            },
            "refs": Object {},
            "rootIds": Object {},
            "sharedLayerGroup": CacheGroup {
              "caching": true,
              "d": [Function],
              "keyMaker": KeyTrie {
                "makeData": [Function],
                "weakness": true,
              },
            },
            "toReference": [Function],
          },
          "policies": Policies {
            "cache": [Circular],
            "config": Object {
              "cache": [Circular],
              "dataIdFromObject": [Function],
              "possibleTypes": undefined,
              "typePolicies": Object {},
            },
            "rootIdsByTypename": Object {
              "Mutation": "ROOT_MUTATION",
              "Query": "ROOT_QUERY",
              "Subscription": "ROOT_SUBSCRIPTION",
            },
            "rootTypenamesById": Object {
              "ROOT_MUTATION": "Mutation",
              "ROOT_QUERY": "Query",
              "ROOT_SUBSCRIPTION": "Subscription",
            },
            "storageTrie": KeyTrie {
              "makeData": [Function],
              "weakness": true,
            },
            "typePolicies": Object {},
            "usingPossibleTypes": false,
          },
          "storeReader": StoreReader {
            "config": Object {
              "addTypename": true,
              "cache": [Circular],
            },
            "executeSelectionSet": [Function],
            "executeSubSelectedArray": [Function],
            "knownResults": WeakMap {},
          },
          "storeWriter": StoreWriter {
            "cache": [Circular],
            "reader": StoreReader {
              "config": Object {
                "addTypename": true,
                "cache": [Circular],
              },
              "executeSelectionSet": [Function],
              "executeSubSelectedArray": [Function],
              "knownResults": WeakMap {},
            },
          },
          "txCount": 0,
          "typenameDocumentCache": Map {},
          "watchDep": [Function],
          "watches": Set {},
        },
        "clearStoreCallbacks": Array [],
        "defaultOptions": Object {},
        "disableNetworkFetches": false,
        "link": MockLink {
          "addTypename": true,
          "mockedResponsesByKey": Object {},
        },
        "localState": LocalState {
          "cache": InMemoryCache {
            "addTypename": true,
            "config": Object {
              "addTypename": true,
              "dataIdFromObject": [Function],
              "resultCaching": true,
              "typePolicies": Object {},
            },
            "data": Root {
              "canRead": [Function],
              "data": Object {},
              "getFieldValue": [Function],
              "group": CacheGroup {
                "caching": true,
                "d": [Function],
                "keyMaker": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
              },
              "policies": Policies {
                "cache": [Circular],
                "config": Object {
                  "cache": [Circular],
                  "dataIdFromObject": [Function],
                  "possibleTypes": undefined,
                  "typePolicies": Object {},
                },
                "rootIdsByTypename": Object {
                  "Mutation": "ROOT_MUTATION",
                  "Query": "ROOT_QUERY",
                  "Subscription": "ROOT_SUBSCRIPTION",
                },
                "rootTypenamesById": Object {
                  "ROOT_MUTATION": "Mutation",
                  "ROOT_QUERY": "Query",
                  "ROOT_SUBSCRIPTION": "Subscription",
                },
                "storageTrie": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
                "typePolicies": Object {},
                "usingPossibleTypes": false,
              },
              "refs": Object {},
              "rootIds": Object {},
              "sharedLayerGroup": CacheGroup {
                "caching": true,
                "d": [Function],
                "keyMaker": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
              },
              "toReference": [Function],
            },
            "getFragmentDoc": [Function],
            "makeVar": [Function],
            "maybeBroadcastWatch": [Function],
            "optimisticData": Root {
              "canRead": [Function],
              "data": Object {},
              "getFieldValue": [Function],
              "group": CacheGroup {
                "caching": true,
                "d": [Function],
                "keyMaker": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
              },
              "policies": Policies {
                "cache": [Circular],
                "config": Object {
                  "cache": [Circular],
                  "dataIdFromObject": [Function],
                  "possibleTypes": undefined,
                  "typePolicies": Object {},
                },
                "rootIdsByTypename": Object {
                  "Mutation": "ROOT_MUTATION",
                  "Query": "ROOT_QUERY",
                  "Subscription": "ROOT_SUBSCRIPTION",
                },
                "rootTypenamesById": Object {
                  "ROOT_MUTATION": "Mutation",
                  "ROOT_QUERY": "Query",
                  "ROOT_SUBSCRIPTION": "Subscription",
                },
                "storageTrie": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
                "typePolicies": Object {},
                "usingPossibleTypes": false,
              },
              "refs": Object {},
              "rootIds": Object {},
              "sharedLayerGroup": CacheGroup {
                "caching": true,
                "d": [Function],
                "keyMaker": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
              },
              "toReference": [Function],
            },
            "policies": Policies {
              "cache": [Circular],
              "config": Object {
                "cache": [Circular],
                "dataIdFromObject": [Function],
                "possibleTypes": undefined,
                "typePolicies": Object {},
              },
              "rootIdsByTypename": Object {
                "Mutation": "ROOT_MUTATION",
                "Query": "ROOT_QUERY",
                "Subscription": "ROOT_SUBSCRIPTION",
              },
              "rootTypenamesById": Object {
                "ROOT_MUTATION": "Mutation",
                "ROOT_QUERY": "Query",
                "ROOT_SUBSCRIPTION": "Subscription",
              },
              "storageTrie": KeyTrie {
                "makeData": [Function],
                "weakness": true,
              },
              "typePolicies": Object {},
              "usingPossibleTypes": false,
            },
            "storeReader": StoreReader {
              "config": Object {
                "addTypename": true,
                "cache": [Circular],
              },
              "executeSelectionSet": [Function],
              "executeSubSelectedArray": [Function],
              "knownResults": WeakMap {},
            },
            "storeWriter": StoreWriter {
              "cache": [Circular],
              "reader": StoreReader {
                "config": Object {
                  "addTypename": true,
                  "cache": [Circular],
                },
                "executeSelectionSet": [Function],
                "executeSubSelectedArray": [Function],
                "knownResults": WeakMap {},
              },
            },
            "txCount": 0,
            "typenameDocumentCache": Map {},
            "watchDep": [Function],
            "watches": Set {},
          },
          "client": [Circular],
        },
        "mutate": [Function],
        "query": [Function],
        "queryDeduplication": true,
        "queryManager": QueryManager {
          "assumeImmutableResults": false,
          "cache": InMemoryCache {
            "addTypename": true,
            "config": Object {
              "addTypename": true,
              "dataIdFromObject": [Function],
              "resultCaching": true,
              "typePolicies": Object {},
            },
            "data": Root {
              "canRead": [Function],
              "data": Object {},
              "getFieldValue": [Function],
              "group": CacheGroup {
                "caching": true,
                "d": [Function],
                "keyMaker": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
              },
              "policies": Policies {
                "cache": [Circular],
                "config": Object {
                  "cache": [Circular],
                  "dataIdFromObject": [Function],
                  "possibleTypes": undefined,
                  "typePolicies": Object {},
                },
                "rootIdsByTypename": Object {
                  "Mutation": "ROOT_MUTATION",
                  "Query": "ROOT_QUERY",
                  "Subscription": "ROOT_SUBSCRIPTION",
                },
                "rootTypenamesById": Object {
                  "ROOT_MUTATION": "Mutation",
                  "ROOT_QUERY": "Query",
                  "ROOT_SUBSCRIPTION": "Subscription",
                },
                "storageTrie": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
                "typePolicies": Object {},
                "usingPossibleTypes": false,
              },
              "refs": Object {},
              "rootIds": Object {},
              "sharedLayerGroup": CacheGroup {
                "caching": true,
                "d": [Function],
                "keyMaker": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
              },
              "toReference": [Function],
            },
            "getFragmentDoc": [Function],
            "makeVar": [Function],
            "maybeBroadcastWatch": [Function],
            "optimisticData": Root {
              "canRead": [Function],
              "data": Object {},
              "getFieldValue": [Function],
              "group": CacheGroup {
                "caching": true,
                "d": [Function],
                "keyMaker": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
              },
              "policies": Policies {
                "cache": [Circular],
                "config": Object {
                  "cache": [Circular],
                  "dataIdFromObject": [Function],
                  "possibleTypes": undefined,
                  "typePolicies": Object {},
                },
                "rootIdsByTypename": Object {
                  "Mutation": "ROOT_MUTATION",
                  "Query": "ROOT_QUERY",
                  "Subscription": "ROOT_SUBSCRIPTION",
                },
                "rootTypenamesById": Object {
                  "ROOT_MUTATION": "Mutation",
                  "ROOT_QUERY": "Query",
                  "ROOT_SUBSCRIPTION": "Subscription",
                },
                "storageTrie": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
                "typePolicies": Object {},
                "usingPossibleTypes": false,
              },
              "refs": Object {},
              "rootIds": Object {},
              "sharedLayerGroup": CacheGroup {
                "caching": true,
                "d": [Function],
                "keyMaker": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
              },
              "toReference": [Function],
            },
            "policies": Policies {
              "cache": [Circular],
              "config": Object {
                "cache": [Circular],
                "dataIdFromObject": [Function],
                "possibleTypes": undefined,
                "typePolicies": Object {},
              },
              "rootIdsByTypename": Object {
                "Mutation": "ROOT_MUTATION",
                "Query": "ROOT_QUERY",
                "Subscription": "ROOT_SUBSCRIPTION",
              },
              "rootTypenamesById": Object {
                "ROOT_MUTATION": "Mutation",
                "ROOT_QUERY": "Query",
                "ROOT_SUBSCRIPTION": "Subscription",
              },
              "storageTrie": KeyTrie {
                "makeData": [Function],
                "weakness": true,
              },
              "typePolicies": Object {},
              "usingPossibleTypes": false,
            },
            "storeReader": StoreReader {
              "config": Object {
                "addTypename": true,
                "cache": [Circular],
              },
              "executeSelectionSet": [Function],
              "executeSubSelectedArray": [Function],
              "knownResults": WeakMap {},
            },
            "storeWriter": StoreWriter {
              "cache": [Circular],
              "reader": StoreReader {
                "config": Object {
                  "addTypename": true,
                  "cache": [Circular],
                },
                "executeSelectionSet": [Function],
                "executeSubSelectedArray": [Function],
                "knownResults": WeakMap {},
              },
            },
            "txCount": 0,
            "typenameDocumentCache": Map {},
            "watchDep": [Function],
            "watches": Set {},
          },
          "clientAwareness": Object {
            "name": undefined,
            "version": undefined,
          },
          "fetchCancelFns": Map {},
          "inFlightLinkObservables": Map {},
          "link": MockLink {
            "addTypename": true,
            "mockedResponsesByKey": Object {},
          },
          "localState": LocalState {
            "cache": InMemoryCache {
              "addTypename": true,
              "config": Object {
                "addTypename": true,
                "dataIdFromObject": [Function],
                "resultCaching": true,
                "typePolicies": Object {},
              },
              "data": Root {
                "canRead": [Function],
                "data": Object {},
                "getFieldValue": [Function],
                "group": CacheGroup {
                  "caching": true,
                  "d": [Function],
                  "keyMaker": KeyTrie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                },
                "policies": Policies {
                  "cache": [Circular],
                  "config": Object {
                    "cache": [Circular],
                    "dataIdFromObject": [Function],
                    "possibleTypes": undefined,
                    "typePolicies": Object {},
                  },
                  "rootIdsByTypename": Object {
                    "Mutation": "ROOT_MUTATION",
                    "Query": "ROOT_QUERY",
                    "Subscription": "ROOT_SUBSCRIPTION",
                  },
                  "rootTypenamesById": Object {
                    "ROOT_MUTATION": "Mutation",
                    "ROOT_QUERY": "Query",
                    "ROOT_SUBSCRIPTION": "Subscription",
                  },
                  "storageTrie": KeyTrie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                  "typePolicies": Object {},
                  "usingPossibleTypes": false,
                },
                "refs": Object {},
                "rootIds": Object {},
                "sharedLayerGroup": CacheGroup {
                  "caching": true,
                  "d": [Function],
                  "keyMaker": KeyTrie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                },
                "toReference": [Function],
              },
              "getFragmentDoc": [Function],
              "makeVar": [Function],
              "maybeBroadcastWatch": [Function],
              "optimisticData": Root {
                "canRead": [Function],
                "data": Object {},
                "getFieldValue": [Function],
                "group": CacheGroup {
                  "caching": true,
                  "d": [Function],
                  "keyMaker": KeyTrie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                },
                "policies": Policies {
                  "cache": [Circular],
                  "config": Object {
                    "cache": [Circular],
                    "dataIdFromObject": [Function],
                    "possibleTypes": undefined,
                    "typePolicies": Object {},
                  },
                  "rootIdsByTypename": Object {
                    "Mutation": "ROOT_MUTATION",
                    "Query": "ROOT_QUERY",
                    "Subscription": "ROOT_SUBSCRIPTION",
                  },
                  "rootTypenamesById": Object {
                    "ROOT_MUTATION": "Mutation",
                    "ROOT_QUERY": "Query",
                    "ROOT_SUBSCRIPTION": "Subscription",
                  },
                  "storageTrie": KeyTrie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                  "typePolicies": Object {},
                  "usingPossibleTypes": false,
                },
                "refs": Object {},
                "rootIds": Object {},
                "sharedLayerGroup": CacheGroup {
                  "caching": true,
                  "d": [Function],
                  "keyMaker": KeyTrie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                },
                "toReference": [Function],
              },
              "policies": Policies {
                "cache": [Circular],
                "config": Object {
                  "cache": [Circular],
                  "dataIdFromObject": [Function],
                  "possibleTypes": undefined,
                  "typePolicies": Object {},
                },
                "rootIdsByTypename": Object {
                  "Mutation": "ROOT_MUTATION",
                  "Query": "ROOT_QUERY",
                  "Subscription": "ROOT_SUBSCRIPTION",
                },
                "rootTypenamesById": Object {
                  "ROOT_MUTATION": "Mutation",
                  "ROOT_QUERY": "Query",
                  "ROOT_SUBSCRIPTION": "Subscription",
                },
                "storageTrie": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
                "typePolicies": Object {},
                "usingPossibleTypes": false,
              },
              "storeReader": StoreReader {
                "config": Object {
                  "addTypename": true,
                  "cache": [Circular],
                },
                "executeSelectionSet": [Function],
                "executeSubSelectedArray": [Function],
                "knownResults": WeakMap {},
              },
              "storeWriter": StoreWriter {
                "cache": [Circular],
                "reader": StoreReader {
                  "config": Object {
                    "addTypename": true,
                    "cache": [Circular],
                  },
                  "executeSelectionSet": [Function],
                  "executeSubSelectedArray": [Function],
                  "knownResults": WeakMap {},
                },
              },
              "txCount": 0,
              "typenameDocumentCache": Map {},
              "watchDep": [Function],
              "watches": Set {},
            },
            "client": [Circular],
          },
          "mutationIdCounter": 1,
          "mutationStore": MutationStore {
            "store": Object {},
          },
          "onBroadcast": [Function],
          "queries": Map {},
          "queryDeduplication": true,
          "queryIdCounter": 1,
          "requestIdCounter": 1,
          "ssrMode": false,
          "transformCache": WeakMap {},
        },
        "reFetchObservableQueries": [Function],
        "resetStore": [Function],
        "resetStoreCallbacks": Array [],
        "typeDefs": undefined,
        "version": "local",
        "watchQuery": [Function],
      }
    }
  >
    <p>
      Not voted yet
    </p>
    <ArticleReplyFeedbackControl
      articleReply={
        Object {
          "articleId": "article1",
          "feedbacks": Array [
            Object {
              "comment": "test comment",
              "id": "feedback1",
              "user": null,
              "vote": "UPVOTE",
            },
            Object {
              "comment": "test comment",
              "id": "feedback1",
              "user": Object {
                "avatarUrl": "https://placekitten.com/100/100",
                "id": "webUser1",
                "name": "Web User",
              },
              "vote": "DOWNVOTE",
            },
          ],
          "negativeFeedbackCount": 1,
          "ownVote": null,
          "positiveFeedbackCount": 1,
          "replyId": "reply1",
        }
      }
      reply={
        Object {
          "id": "reply1",
          "text": "Text reply text",
        }
      }
    >
      <div
        className="makeStyles-root"
      >
        <ButtonGroupDisplay
          articleReply={
            Object {
              "articleId": "article1",
              "feedbacks": Array [
                Object {
                  "comment": "test comment",
                  "id": "feedback1",
                  "user": null,
                  "vote": "UPVOTE",
                },
                Object {
                  "comment": "test comment",
                  "id": "feedback1",
                  "user": Object {
                    "avatarUrl": "https://placekitten.com/100/100",
                    "id": "webUser1",
                    "name": "Web User",
                  },
                  "vote": "DOWNVOTE",
                },
              ],
              "negativeFeedbackCount": 1,
              "ownVote": null,
              "positiveFeedbackCount": 1,
              "replyId": "reply1",
            }
          }
          onReasonClick={[Function]}
          onVoteDown={[Function]}
          onVoteUp={[Function]}
        >
          <div
            className="MuiButtonGroup-root makeStyles-buttonGroup"
            data-ga="Number display"
            role="group"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-outlined MuiButtonGroup-grouped MuiButtonGroup-groupedHorizontal MuiButtonGroup-groupedOutlined MuiButtonGroup-groupedOutlinedHorizontal MuiButtonGroup-groupedOutlined makeStyles-vote"
              data-ga="Upvote"
              disabled={false}
              onBlur={[Function]}
              onClick={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                1
                <ThumbUpIcon
                  className="makeStyles-thumbIcon"
                >
                  <svg
                    aria-hidden="true"
                    className="MuiSvgIcon-root makeStyles-thumbIcon"
                    focusable="false"
                    viewBox="0 0 17 15"
                  >
                    <path
                      d="M1 13.8672H3.65455V6.51612H1V13.8672ZM15.6 7.1287C15.6 6.45486 15.0027 5.90353 14.2727 5.90353H10.0852L10.7156 3.10401L10.7355 2.90798C10.7355 2.65682 10.6227 2.42403 10.4435 2.25863L9.74009 1.61542L5.37336 5.65237C5.12782 5.8729 4.98182 6.17919 4.98182 6.51612V12.642C4.98182 13.3158 5.57909 13.8672 6.30909 13.8672H12.2818C12.8326 13.8672 13.3038 13.5609 13.5029 13.1198L15.5071 8.80107C15.5668 8.66017 15.6 8.51315 15.6 8.35388V7.1287Z"
                    />
                  </svg>
                </ThumbUpIcon>
              </span>
              <NoSsr>
                <span
                  className="MuiTouchRipple-root"
                >
                  <TransitionGroup
                    childFactory={[Function]}
                    component={null}
                    exit={true}
                  />
                </span>
              </NoSsr>
            </button>
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-outlined MuiButtonGroup-grouped MuiButtonGroup-groupedHorizontal MuiButtonGroup-groupedOutlined MuiButtonGroup-groupedOutlinedHorizontal MuiButtonGroup-groupedOutlined makeStyles-vote"
              data-ga="Downvote"
              disabled={false}
              onBlur={[Function]}
              onClick={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                1
                <ThumbDownIcon
                  className="makeStyles-thumbIcon"
                >
                  <svg
                    aria-hidden="true"
                    className="MuiSvgIcon-root makeStyles-thumbIcon"
                    focusable="false"
                    viewBox="0 0 17 15"
                  >
                    <path
                      d="M10.2909 1.46155H4.31818C3.76736 1.46155 3.29618 1.76784 3.09709 2.2089L1.09291 6.52765C1.03318 6.66854 1 6.81556 1 6.97483V8.20001C1 8.87386 1.59727 9.42518 2.32727 9.42518H6.51482L5.88436 12.2247L5.86445 12.4207C5.86445 12.6719 5.97727 12.9047 6.15646 13.0701L6.85991 13.7133L11.2333 9.67635C11.4722 9.45581 11.6182 9.14952 11.6182 8.8126V2.68672C11.6182 2.01288 11.0209 1.46155 10.2909 1.46155ZM12.9455 1.46155V8.8126H15.6V1.46155H12.9455Z"
                    />
                  </svg>
                </ThumbDownIcon>
              </span>
              <NoSsr>
                <span
                  className="MuiTouchRipple-root"
                >
                  <TransitionGroup
                    childFactory={[Function]}
                    component={null}
                    exit={true}
                  />
                </span>
              </NoSsr>
            </button>
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-outlined MuiButtonGroup-grouped MuiButtonGroup-groupedHorizontal MuiButtonGroup-groupedOutlined MuiButtonGroup-groupedOutlinedHorizontal MuiButtonGroup-groupedOutlined makeStyles-vote"
              disabled={false}
              onBlur={[Function]}
              onClick={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                See Reasons
              </span>
              <NoSsr>
                <span
                  className="MuiTouchRipple-root"
                >
                  <TransitionGroup
                    childFactory={[Function]}
                    component={null}
                    exit={true}
                  />
                </span>
              </NoSsr>
            </button>
          </div>
        </ButtonGroupDisplay>
      </div>
    </ArticleReplyFeedbackControl>
    <p>
      Upvoted
    </p>
    <ArticleReplyFeedbackControl
      articleReply={
        Object {
          "articleId": "article1",
          "feedbacks": Array [
            Object {
              "comment": "test comment",
              "id": "feedback1",
              "user": null,
              "vote": "UPVOTE",
            },
            Object {
              "comment": "test comment",
              "id": "feedback1",
              "user": Object {
                "avatarUrl": "https://placekitten.com/100/100",
                "id": "webUser1",
                "name": "Web User",
              },
              "vote": "DOWNVOTE",
            },
          ],
          "negativeFeedbackCount": 1,
          "ownVote": "UPVOTE",
          "positiveFeedbackCount": 1,
          "replyId": "reply1",
        }
      }
      reply={
        Object {
          "id": "reply1",
          "text": "Text reply text",
        }
      }
    >
      <div
        className="makeStyles-root"
      >
        <ButtonGroupDisplay
          articleReply={
            Object {
              "articleId": "article1",
              "feedbacks": Array [
                Object {
                  "comment": "test comment",
                  "id": "feedback1",
                  "user": null,
                  "vote": "UPVOTE",
                },
                Object {
                  "comment": "test comment",
                  "id": "feedback1",
                  "user": Object {
                    "avatarUrl": "https://placekitten.com/100/100",
                    "id": "webUser1",
                    "name": "Web User",
                  },
                  "vote": "DOWNVOTE",
                },
              ],
              "negativeFeedbackCount": 1,
              "ownVote": "UPVOTE",
              "positiveFeedbackCount": 1,
              "replyId": "reply1",
            }
          }
          onReasonClick={[Function]}
          onVoteDown={[Function]}
          onVoteUp={[Function]}
        >
          <div
            className="MuiButtonGroup-root makeStyles-buttonGroup"
            data-ga="Number display"
            role="group"
          >
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-outlined MuiButtonGroup-grouped MuiButtonGroup-groupedHorizontal MuiButtonGroup-groupedOutlined MuiButtonGroup-groupedOutlinedHorizontal MuiButtonGroup-groupedOutlined makeStyles-vote makeStyles-voted"
              data-ga="Upvote"
              disabled={false}
              onBlur={[Function]}
              onClick={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                1
                <ThumbUpIcon
                  className="makeStyles-thumbIcon"
                >
                  <svg
                    aria-hidden="true"
                    className="MuiSvgIcon-root makeStyles-thumbIcon"
                    focusable="false"
                    viewBox="0 0 17 15"
                  >
                    <path
                      d="M1 13.8672H3.65455V6.51612H1V13.8672ZM15.6 7.1287C15.6 6.45486 15.0027 5.90353 14.2727 5.90353H10.0852L10.7156 3.10401L10.7355 2.90798C10.7355 2.65682 10.6227 2.42403 10.4435 2.25863L9.74009 1.61542L5.37336 5.65237C5.12782 5.8729 4.98182 6.17919 4.98182 6.51612V12.642C4.98182 13.3158 5.57909 13.8672 6.30909 13.8672H12.2818C12.8326 13.8672 13.3038 13.5609 13.5029 13.1198L15.5071 8.80107C15.5668 8.66017 15.6 8.51315 15.6 8.35388V7.1287Z"
                    />
                  </svg>
                </ThumbUpIcon>
              </span>
              <NoSsr>
                <span
                  className="MuiTouchRipple-root"
                >
                  <TransitionGroup
                    childFactory={[Function]}
                    component={null}
                    exit={true}
                  />
                </span>
              </NoSsr>
            </button>
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-outlined MuiButtonGroup-grouped MuiButtonGroup-groupedHorizontal MuiButtonGroup-groupedOutlined MuiButtonGroup-groupedOutlinedHorizontal MuiButtonGroup-groupedOutlined makeStyles-vote"
              data-ga="Downvote"
              disabled={false}
              onBlur={[Function]}
              onClick={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                1
                <ThumbDownIcon
                  className="makeStyles-thumbIcon"
                >
                  <svg
                    aria-hidden="true"
                    className="MuiSvgIcon-root makeStyles-thumbIcon"
                    focusable="false"
                    viewBox="0 0 17 15"
                  >
                    <path
                      d="M10.2909 1.46155H4.31818C3.76736 1.46155 3.29618 1.76784 3.09709 2.2089L1.09291 6.52765C1.03318 6.66854 1 6.81556 1 6.97483V8.20001C1 8.87386 1.59727 9.42518 2.32727 9.42518H6.51482L5.88436 12.2247L5.86445 12.4207C5.86445 12.6719 5.97727 12.9047 6.15646 13.0701L6.85991 13.7133L11.2333 9.67635C11.4722 9.45581 11.6182 9.14952 11.6182 8.8126V2.68672C11.6182 2.01288 11.0209 1.46155 10.2909 1.46155ZM12.9455 1.46155V8.8126H15.6V1.46155H12.9455Z"
                    />
                  </svg>
                </ThumbDownIcon>
              </span>
              <NoSsr>
                <span
                  className="MuiTouchRipple-root"
                >
                  <TransitionGroup
                    childFactory={[Function]}
                    component={null}
                    exit={true}
                  />
                </span>
              </NoSsr>
            </button>
            <button
              className="MuiButtonBase-root MuiButton-root MuiButton-outlined MuiButtonGroup-grouped MuiButtonGroup-groupedHorizontal MuiButtonGroup-groupedOutlined MuiButtonGroup-groupedOutlinedHorizontal MuiButtonGroup-groupedOutlined makeStyles-vote"
              disabled={false}
              onBlur={[Function]}
              onClick={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              tabIndex={0}
              type="button"
            >
              <span
                className="MuiButton-label"
              >
                See Reasons
              </span>
              <NoSsr>
                <span
                  className="MuiTouchRipple-root"
                >
                  <TransitionGroup
                    childFactory={[Function]}
                    component={null}
                    exit={true}
                  />
                </span>
              </NoSsr>
            </button>
          </div>
        </ButtonGroupDisplay>
      </div>
    </ArticleReplyFeedbackControl>
  </ApolloProvider>
</MockedProvider>
`;
